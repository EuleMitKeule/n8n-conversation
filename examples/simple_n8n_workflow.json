{
    "nodes": [
        {
            "parameters": {
                "model": {
                    "__rl": true,
                    "value": "gpt-4o-mini",
                    "mode": "list",
                    "cachedResultName": "gpt-4o-mini"
                },
                "options": {
                    "responseFormat": "={{ ($json.body && $json.body.structure != null) ? 'json_object' : 'text' }}"
                }
            },
            "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
            "typeVersion": 1.2,
            "position": [
                240,
                96
            ],
            "id": "08897615-add4-49dd-9f75-e066abe4ce91",
            "name": "OpenAI Chat Model",
            "credentials": {
                "openAiApi": {
                    "id": "wPtEzytsyQHnTsV2",
                    "name": "OpenAi account"
                }
            }
        },
        {
            "parameters": {
                "promptType": "define",
                "text": "={{ $json.body.query }}",
                "options": {
                    "systemMessage": "={{ $json.body && $json.body.structure != null ? \"You must return the final answer strictly as JSON that conforms to the following schema: \" + JSON.stringify($json.body.structure) : \"\" }}",
                    "passthroughBinaryImages": true,
                    "enableStreaming": "={{ $json.body.stream }}"
                }
            },
            "type": "@n8n/n8n-nodes-langchain.agent",
            "typeVersion": 2.2,
            "position": [
                240,
                -96
            ],
            "id": "067cd63e-55be-4c7b-a233-bdd172de2dd5",
            "name": "Agent"
        },
        {
            "parameters": {
                "jsCode": "const src = items[0].json;\nconst list = Array.isArray(src?.body?.binary_objects) ? src.body.binary_objects : [];\n\nfunction stripPrefix(val){ return String(val ?? '').replace(/^data:.*?;base64,/, ''); }\nfunction baseName(p){ const s=String(p??''); const a=s.split('/').pop(); const b=s.split('\\\\').pop(); return (a&&a.length<=s.length?a:b)||''; }\nfunction safeKey(name,i){ const k=String(name??'').trim().toLowerCase().replace(/[^a-z0-9_\\-]/g,'_'); return k||`data${i}`; }\n\n// If no binaries present: pass JSON through 1:1 (no binary prop)\nif (!list.length) {\n  return [{ json: src }];\n}\n\n// Else: emit one item per binary, JSON untouched\nreturn list.map((bo, i) => {\n  const key = safeKey(bo?.name, i);\n  return {\n    json: src, // unchanged\n    binary: {\n      [key]: {\n        data: stripPrefix(bo?.data),            // base64 string (not Buffer)\n        fileName: baseName(bo?.path) || key,\n        mimeType: bo?.mime_type || 'application/octet-stream',\n      },\n    },\n  };\n});\n"
            },
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                48,
                -96
            ],
            "id": "3074b6d0-daeb-41a7-b07d-9ca04989e253",
            "name": "Extract attachments"
        },
        {
            "parameters": {
                "httpMethod": "POST",
                "path": "agent",
                "responseMode": "streaming",
                "options": {}
            },
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 2.1,
            "position": [
                -160,
                -96
            ],
            "id": "d6cb88e7-5273-4f69-9291-85545e50d305",
            "name": "Webhook",
            "webhookId": "cebf2e3f-6b65-4f94-beaa-0f749996e337"
        }
    ],
    "connections": {
        "OpenAI Chat Model": {
            "ai_languageModel": [
                [
                    {
                        "node": "Agent",
                        "type": "ai_languageModel",
                        "index": 0
                    }
                ]
            ]
        },
        "Agent": {
            "main": [
                []
            ]
        },
        "Extract attachments": {
            "main": [
                [
                    {
                        "node": "Agent",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Webhook": {
            "main": [
                [
                    {
                        "node": "Extract attachments",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    },
    "pinData": {},
    "meta": {
        "templateCredsSetupCompleted": true,
        "instanceId": "fac97a43284b2c7e834ae31b61acaecce7a1a7c9f9c28473ca61f99fd163ba9b"
    }
}
